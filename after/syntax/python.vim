" vim-concealÈáåÁöÑ
    " math related
        syn    match pyMath_conceal "<=" conceal cchar=‚â§
        syn    match pyMath_conceal ">=" conceal cchar=‚â•

        syn    match pyMath_conceal " \zs/\ze " conceal cchar=√∑
        syn    match pyMath_conceal ' \zs\*\ze ' conceal cchar=x
        syn    match pyMath_conceal ' \zs\*\ze= ' conceal cchar=x
        "\ syn    match pyMath_conceal '\v[^-=+*/]\zs\=\ze[^=]' conceal cchar=‚Üê
                                                    "\ Ê≤°ÊúâÁ©∫Ê†ºÁöÑÊó∂ÂÄô, ¬ø‚Üê¬øÁúãÁùÄÂæàÊã•Êå§
        syn    match pyMath_conceal "\<\%(math\.\)\?sqrt\>" conceal cchar=‚àö
        syn    match pyMath_conceal '!=' conceal cchar=‚â†

        " syn    match Normal '\v<self>' conceal cchar=êçÉ
        " syn    match Normal '\v<self>\.' conceal cchar=‚ä•
        " syn    match Normal '\v<self>\.' conceal cchar=‚•Ω
        "\ syn    match Self_doT '\v<self>\.' conceal cchar=‚•Å
        syn    match Self_doT '\v<self>\.' conceal cchar=‚Ü∫
        "\ syn    match Self_doT '\v<self>\.' conceal cchar=‚ô¢  double width




        " syn    match pyMath_conceal "\<\%(math\.\)\?prod\>" conceal cchar=‚àè
        " syn    match pyMath_conceal "\( \|\)\*\*\( \|\)2\>" conceal cchar=¬≤
        " syn    match pyMath_conceal "\( \|\)\*\*\( \|\)3\>" conceal cchar=¬≥
        syn    match pyKeyword "\v<%(math\.|np\.)?pi>" conceal cchar=œÄ


    " keywords
        " syn    keyword pyMath_conceal product conceal cchar=‚àè
        " syn    keyword pyMath_conceal sum conceal cchar=‚àë
        " syn    keyword pyStatement lambda conceal cchar=Œª

    hi link pyMath_conceal Operator
    hi link pyStatement Statement
    hi link pyKeyword Keyword
    hi! link Conceal Operator


" " https://github.com/alok/python-conceal/blob/master/after/syntax/python.vim
    " " Remove the keywords.
    " " We'll re-add them below. Use silent in case the group  doesn't exist.
    "
    "     silent! syntax clear pythonOperator
    "
    "     " TODO highlight comments correctly
    "     " syntax match pyComment "#" conceal cchar=‚çù
    "
    "     " XXX least specific cases at the top,
    "     " since the match rules seem to be  cumulative.
    "
    "
    "     " Include the space after ‚Äúnot‚Äù ‚Äì if present ‚Äì so that ‚Äúnot a‚Äù becomes ‚Äú¬¨a‚Äù.
    "     " if it is after  ‚Äúis ‚Äù.
    "       " don't hide ‚Äúnot‚Äù behind  ‚Äò¬¨‚Äô
    "     " syntax match pyMath_conceal "\%(is \)\@<!\<not\%( \|\>\)" conceal cchar=¬¨
    "
    "     " Subscripts
    "
    "
    "     " Matches x0 -> x‚ÇÄ A2 -> A‚ÇÇ word2 -> word‚ÇÇ
    "         " Use ms=s+1 to avoid concealing the letter before the number
    "         syn    match Normal '\v<[[:alpha:]_]+0>'ms=e conceal cchar=‚ÇÄ
    "         syn    match Normal '\v<[[:alpha:]_]+1>'ms=e conceal cchar=‚ÇÅ
    "         syn    match Normal '\v<[[:alpha:]_]+2>'ms=e conceal cchar=‚ÇÇ
    "         syn    match Normal '\v<[[:alpha:]_]+3>'ms=e conceal cchar=‚ÇÉ
    "         syn    match Normal '\v<[[:alpha:]_]+4>'ms=e conceal cchar=‚ÇÑ
    "         syn    match Normal '\v<[[:alpha:]_]+5>'ms=e conceal cchar=‚ÇÖ
    "         syn    match Normal '\v<[[:alpha:]_]+6>'ms=e conceal cchar=‚ÇÜ
    "         syn    match Normal '\v<[[:alpha:]_]+7>'ms=e conceal cchar=‚Çá
    "         syn    match Normal '\v<[[:alpha:]_]+8>'ms=e conceal cchar=‚Çà
    "         syn    match Normal '\v<[[:alpha:]_]+9>'ms=e conceal cchar=‚Çâ
    "
    "     " Numbers
    "         syn    match Normal '\v[^_]\zs_0\ze>' conceal cchar=‚ÇÄ
    "         syn    match Normal '\v[^_]\zs_1\ze>' conceal cchar=‚ÇÅ
    "         syn    match Normal '\v[^_]\zs_2\ze>' conceal cchar=‚ÇÇ
    "         syn    match Normal '\v[^_]\zs_3\ze>' conceal cchar=‚ÇÉ
    "         syn    match Normal '\v[^_]\zs_4\ze>' conceal cchar=‚ÇÑ
    "         syn    match Normal '\v[^_]\zs_5\ze>' conceal cchar=‚ÇÖ
    "         syn    match Normal '\v[^_]\zs_6\ze>' conceal cchar=‚ÇÜ
    "         syn    match Normal '\v[^_]\zs_7\ze>' conceal cchar=‚Çá
    "         syn    match Normal '\v[^_]\zs_8\ze>' conceal cchar=‚Çà
    "         syn    match Normal '\v[^_]\zs_9\ze>' conceal cchar=‚Çâ
    "
    "     " Letters
    "         " syn    match Normal '\v[^_]\zs_[aA]\ze>' conceal cchar=‚Çê
    "         " syn    match Normal '\v[^_]\zs_[lL]\ze>' conceal cchar=‚Çó
    "         " syn    match Normal '\v[^_]\zs_[pP]\ze>' conceal cchar=‚Çö
    "         " syn    match Normal '\v[^_]\zs_[rR]\ze>' conceal cchar=·µ£
    "         " syn    match Normal '\v[^_]\zs_[sS]\ze>' conceal cchar=‚Çõ
    "         " syn    match Normal '\v[^_]\zs_[uU]\ze>' conceal cchar=·µ§
    "         " syn    match Normal '\v[^_]\zs_[vV]\ze>' conceal cchar=·µ•
    "         " syn    match Normal '\v[^_]\zs_[xX]\ze>' conceal cchar=‚Çì
    "         " syn    match Normal '\v[^_]\zs_[hH]\ze>' conceal cchar=‚Çï
    "         " syn    match Normal '\v[^_]\zs_[iI]\ze>' conceal cchar=·µ¢
    "         " syn    match Normal '\v[^_]\zs_[jJ]\ze>' conceal cchar=‚±º
    "         " syn    match Normal '\v[^_]\zs_[kK]\ze>' conceal cchar=‚Çñ
    "         " syn    match Normal '\v[^_]\zs_[nN]\ze>' conceal cchar=‚Çô
    "         " syn    match Normal '\v[^_]\zs_[mM]\ze>' conceal cchar=‚Çò
    "         " syn    match Normal '\v[^_]\zs_[tT]\ze>' conceal cchar=‚Çú
    "
    "     " syntax match Constant '\v<\d+\zs_\ze\d+>' conceal cchar=,
    "         " " Conceal underscores in numeric literals with commas
    "
    "     " Conceal things like a_ -> a'
    "         syn    match Normal '\v[^_]\zs_\ze>' conceal cchar=‚Ä≤
    "         " Underscore by itself is not concealed
    "         syn    match Normal '\v<\zs_\ze>' conceal cchar=_
    "
    "
    "     " Need to be handled specially for `not in` to work. Order doesn't matter.
    "         syn    match Normal '\v<not in>' conceal cchar=‚àâ
    "         syn    match Normal '\v<in>' conceal cchar=‚àà
    "
    "
    "
    "
    "     syn    match Normal '->' conceal cchar=‚Üí
    "     syn    match Normal '<=' conceal cchar=‚â§
    "     syn    match Normal '>=' conceal cchar=‚â•
    "
    "     " syn    match Normal '\s@\s'ms=s+1,me=e-1 conceal cchar=‚äó
    "     " syn    match Normal '\v(\+|-|*|/|\%)@!\=' conceal cchar=‚Üê
    "     " syn    match Normal '\v\=@<!\=\=\=@!' conceal cchar=‚âù
    "                       " ÊéíÈô§Âá∫Áé∞Âú®==ÂâçÈù¢ÁöÑ=
    "                                     " ÊéíÈô§Âá∫Áé∞Âú®==ÂêéÁöÑ=
                           " only conceal `==` if alone, to avoid concealing merge conflict markers
    "
    "
    "
    "
    "     syn    match Normal '\v<((math|torch|np|tf|scipy|sp)\.)?ceil>' conceal cchar=‚åà
    "     syn    match Normal '\v<((math|torch|np|tf|scipy|sp)\.)?floor>' conceal cchar=‚åä
    "     syn    match Normal '\v<((torch|np|tf|scipy|sp)\.)?(eye|identity)>' conceal cchar=ùïÄ
    "
    "     syn    match Normal '\v<((math|np|scipy|sp)\.)e>' conceal cchar=‚ÑØ
    "     syn    match Normal '\v<((math|np|scipy|sp)\.)?inf>' conceal cchar=‚àû
    "     syn    match Normal "\v<float('inf')>" conceal cchar=‚àû
    "     syn    match Normal '\v<float("inf")>' conceal cchar=‚àû
    "
    "     syn    match Normal '\v<((math|torch|np|tf|scipy|sp)\.)?pi>' conceal cchar=œÄ
    "     syn    match Normal '\v<((torch|np|scipy|sp)\.mean)|(tf\.reduce_mean)>' conceal cchar=ùîº
    "
    "     " 2**4
            syn    match Normal '\v\zs ?\*\* ?2\ze>([^.]|$)' conceal cchar=¬≤
            syn    match Normal '\v\zs ?\*\* ?n\ze>([^.]|$)' conceal cchar=‚Åø
            syn    match Normal '\v\zs ?\*\* ?i\ze>([^.]|$)' conceal cchar=‚Å±
            syn    match Normal '\v\zs ?\*\* ?j\ze>([^.]|$)' conceal cchar= ≤
            syn    match Normal '\v\zs ?\*\* ?k\ze>([^.]|$)' conceal cchar=·µè
            syn    match Normal '\v\zs ?\*\* ?t\ze>([^.]|$)' conceal cchar=·µó
            syn    match Normal '\v\zs ?\*\* ?x\ze>([^.]|$)' conceal cchar=À£
            syn    match Normal '\v\zs ?\*\* ?y\ze>([^.]|$)' conceal cchar= ∏
            syn    match Normal '\v\zs ?\*\* ?z\ze>([^.]|$)' conceal cchar=·∂ª
            syn    match Normal '\v\zs ?\*\* ?a\ze>([^.]|$)' conceal cchar=·µÉ
            syn    match Normal '\v\zs ?\*\* ?b\ze>([^.]|$)' conceal cchar=·µá
            syn    match Normal '\v\zs ?\*\* ?c\ze>([^.]|$)' conceal cchar=·∂ú
            syn    match Normal '\v\zs ?\*\* ?d\ze>([^.]|$)' conceal cchar=·µà
            syn    match Normal '\v\zs ?\*\* ?e\ze>([^.]|$)' conceal cchar=·µâ
            syn    match Normal '\v\zs ?\*\* ?p\ze>([^.]|$)' conceal cchar=·µñ
            syn    match Normal '\v\zs ?\*\* ?l\ze>([^.]|$)' conceal cchar=À°
            syn    match Normal '\v\zs ?\*\* ?m\ze>([^.]|$)' conceal cchar=·µê
    "
    "     " no ending word boundary on parens
    "     " Áü©ÈòµTranspose?
    "         syn    match Normal '\v\.t\(\)' conceal cchar=·µÄ
    "         syn    match Normal '\v\.T>' conceal cchar=·µÄ
    "         syn    match Normal '\v\.inverse\(\)' conceal cchar=‚Åª
    "
    "         syn    match Normal '\v\.reshape>'ms=s conceal cchar=‚ôö
    "
    "         syn    match Normal '<<' conceal cchar=‚â∫
    "         syn    match Normal '>>' conceal cchar=‚âª
    "     " Â∏åËÖä
    "         syn    keyword Normal alpha ALPHA conceal cchar=Œ±
    "         syn    keyword Normal beta BETA conceal cchar=Œ≤
    "         syn    keyword Normal Gamma conceal cchar=Œì
    "         syn    keyword Normal gamma GAMMA conceal cchar=Œ≥
    "         syn    keyword Normal Delta conceal cchar=Œî
    "         syn    keyword Normal delta DELTA conceal cchar=Œ¥
    "         syn    keyword Normal epsilon EPSILON conceal cchar=Œµ
    "         syn    keyword Normal zeta ZETA conceal cchar=Œ∂
    "         syn    keyword Normal eta ETA conceal cchar=Œ∑
    "         syn    keyword Normal Theta conceal cchar=œ¥
    "         syn    keyword Normal theta THETA conceal cchar=Œ∏
    "         syn    keyword Normal kappa KAPPA conceal cchar=Œ∫
    "         syn    keyword Normal lambda LAMBDA lambda_ _lambda conceal cchar=Œª
    "         syn    keyword Normal mu MU conceal cchar=Œº
    "         syn    keyword Normal nu NU conceal cchar=ŒΩ
    "         syn    keyword Normal Xi conceal cchar=Œû
    "         syn    keyword Normal xi XI conceal cchar=Œæ
    "         syn    keyword Normal Pi conceal cchar=Œ†
    "         syn    keyword Normal rho RHO conceal cchar=œÅ
    "         syn    keyword Normal sigma SIGMA conceal cchar=œÉ
    "         syn    keyword Normal tau TAU conceal cchar=œÑ
    "         syn    keyword Normal upsilon UPSILON conceal cchar=œÖ
    "         syn    keyword Normal Phi conceal cchar=Œ¶
    "         syn    keyword Normal phi PHI conceal cchar=œÜ
    "         syn    keyword Normal chi CHI conceal cchar=œá
    "         syn    keyword Normal Psi conceal cchar=Œ®
    "         syn    keyword Normal psi PSI conceal cchar=œà
    "         syn    keyword Normal Omega conceal cchar=Œ©
    "         syn    keyword Normal omega OMEGA conceal cchar=œâ
    "         syn    keyword Normal nabla NABLA conceal cchar=‚àá
    "
    "     " like APL
    "     " Need to use `syntax match` instead of `syntax keyword` or else keyword takes
    "     " priority and `range(len...` isn't matched.
    "     syn    match Normal '\v<range>' conceal cchar=‚ç≥
    "     syn    match Normal '\v<\zsrange\(len\ze\(' conceal cchar=‚ç≥
    "     " syn    keyword Normal enumerate conceal cchar=‚Üë
    "
    "
    "     syn    keyword Constant None conceal cchar=‚àÖ
    "     syn    keyword Constant True conceal cchar=‚úì
    "     syn    keyword Constant False conceal cchar=‚úó
    "
    "     " http://www.fileformat.info/info/unicode/block/geometric_shapes/images.htm
    "         " syn    keyword Keyword break conceal cchar=‚óÅ
    "         syn    keyword Keyword continue conceal cchar=‚Üª
    "         " syn    keyword Keyword return conceal cchar=‚óÄ
    "         " syn    keyword Keyword if conceal cchar=‚ñ∏
    "         " syn    keyword Keyword elif conceal cchar=‚ñπ
    "         " syn    keyword Keyword else conceal cchar=‚ñ™
    "
    "     syn    keyword Normal for conceal cchar=‚àÄ
    "     " syn    keyword Normal while conceal cchar=‚•Å
    "
    "     " syn    keyword Normal def conceal cchar=Œª
    "     syn    keyword Normal class conceal cchar=‚Ñ≠
    "     " syntax keyword Keyword assert conceal cchar=‚ÄΩ
    "     syn    match Keyword 'yield from' conceal cchar=‚áÑ
    "     syn    keyword Keyword yield conceal cchar=‚áá
    "
    "     syn    keyword Type Vector conceal cchar=V
    "     syn    match Type '(np|scipy|sp)\.ndarray' conceal cchar=V
    "     syn    match Type '\vtf\.Tensor' conceal cchar=ùïã
    "     syn    match Type '\vtorch\.[tT]ensor' conceal cchar=ùïã
    "     syn    keyword Type tensor Tensor conceal cchar=ùïã
    "     syn    match Type '\v(torch|np|tf|scipy|sp)\.float(32|64)?' conceal cchar=‚Ñù
    "     syn    match Type '\v(torch|np|tf|scipy|sp)\.int(32|64)?' conceal cchar=‚Ñ§
    "
    "     " XXX These have to be after all the float{16,32} stuff to avoid accidental
    "     " capture.
    "     " Use @! to ensure that type casts are not concealed,
    "     " since that's  hard to read._
    "     "
    "     " [^\s)] is to avoid the edge case of (x: int)
    "     " where the right paren would  override the int conceal.
    "     syn    match Type '\v<int(\(|[^\s)\],:])@!' conceal cchar=‚Ñ§
    "     syn    match Type '\v<float(\(|[^\s)\],:])@!' conceal cchar=‚Ñù
    "     syn    match Type '\v<complex(\(|[^\s)\],:])@!' conceal cchar=‚ÑÇ
    "     syn    match Type '\v<str(\(|[^\s)\],:])@!' conceal cchar=ùêí
    "     syn    match Type '\v<bool(\(|[^\s)\],:])@!' conceal cchar=ùîπ
    "
    "     " syn    match Normal '\v((np|scipy|sp|torch)\.)?arange' conceal cchar=‚ç≥
    "
    "     syn    keyword Builtin all
    "     syn    keyword Builtin any conceal cchar=‚àÉ
    "
    "     hi! link pyMath_conceal Operator
    "     hi! link pyStatement Statement
    "     hi! link pyKeyword Keyword
    "     hi! link pyComment Comment
    "     hi! link pyConstant Constant
    "     hi! link pySpecial Special
    "     hi! link pyIdentifier Identifier
    "     hi! link pyType Type
    "
